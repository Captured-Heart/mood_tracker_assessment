on:
  pull_request:
    branches:
      - UI_build
  push:
    branches:
      - main
name: "Build & Release"
jobs:
  build:
    # i am setting up system and dependencies (Java, Flutter verison etc)
    name: Setting up the environment
    runs-on: macos-latest
    steps:
      #CHECKOUT THE REPOSITORY
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Select Xcode 16.2
        run: sudo xcode-select -s "/Applications/Xcode_16.2.app/Contents/Developer"
        # uses: maxim-lobanov/setup-xcode@v1
        # with:
        #   xcode-version: '16.2'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "oracle"
        #SETUP FLUTTER
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.29.0"
          channel: "stable"
          cache: true
        
         # Cache Flutter packages
      - name: Cache Flutter pub
        uses: actions/cache@v4
        with:
          path: ${{ env.HOME }}/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pub-
      #IF I HAD FIREBASE INSTALLED, I WOULD ACCESS THE DETAILS OF THE FILES HERE
      #- run: echo ${{ secrets.ENV_FILE }} | base64 -d > .env
      # - run: echo ${{ secrets.FIREBASE_ANDROID_FILE }} | base64 -d > android/app/google-services.json
      #- run: echo ${{ secrets.FIREBASE_IOS_FILE }} | base64 -d > ios/Runner/GoogleService-Info.plist
      #- run: echo ${{ secrets.FIREBASE_OPTIONS_FILE }} | base64 -d > lib/firebase_options.dart
      #SETTING UP KEYSTORE
      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=keystore.jks" >> android/key.properties
        # BUILD THE APP
      - name: Cleaning and making the builds for APK,AAB & IPA
        run: |
          flutter clean
      - run: flutter pub get
      - run: flutter build apk --debug --split-per-abi
      - run: flutter build aab
      # BUILDING IPA NOW
      # - name: BUILDING IOS (ipa) NOW
      #   run: |
      #     flutter build ios --simulator --debug --no-codesign
      #     cd build/ios/iphoneos
      #     mkdir Payload
      #     cd Payload
      #     ln -s ../Runner.app
      #     cd ..
      #     zip -r app.ipa Payload

        # RUN XCODE BUILD & TEST
          #Detect the latest available iPhone 15 Pro runtime dynamically
      - name: Find Simulator
        id: sim
        run: |
            # Try to find iPhone 15 Pro
            DEVICE_LINE=$(xcrun simctl list devices available | grep "iPhone 15 Pro" | head -n 1)

            if [ -z "$DEVICE_LINE" ]; then
              echo "⚠️ iPhone 15 Pro not found, falling back to first available simulator..."
              DEVICE_LINE=$(xcrun simctl list devices available | grep "Booted" -v | head -n 1)
            fi

            DEVICE_UDID=$(echo "$DEVICE_LINE" | awk -F '[()]' '{print $2}')
            DEVICE_NAME=$(echo "$DEVICE_LINE" | awk -F '[()]' '{print $1}' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            DEVICE_OS=$(echo "$DEVICE_LINE" | sed -E 's/.*OS ([0-9]+\.[0-9]+).*/\1/')

            echo "device=$DEVICE_UDID" >> $GITHUB_OUTPUT
            echo "name=$DEVICE_NAME" >> $GITHUB_OUTPUT
            echo "os=$DEVICE_OS" >> $GITHUB_OUTPUT

            echo "✅ Using Simulator: $DEVICE_NAME (OS $DEVICE_OS, UDID $DEVICE_UDID)"

        # Boot the chosen simulator
      - name: Boot Simulator
        run: |
            xcrun simctl boot "${{ steps.sim.outputs.device }}" || true
            xcrun simctl list devices

        # Run Xcode build & test on the chosen simulator
      - name: Xcode Build & Test
        run: |
            xcodebuild clean build test \
              -workspace ios/Runner.xcworkspace \
              -scheme Runner \
              -destination "platform=iOS Simulator,id=${{ steps.sim.outputs.device }}"

      #SETUP JAVA
      # EXTRACT THE VERSION
      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV
        # CHECK IF THE TAG EXISTS
      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi
        # Modify THE TAG
      - name: Modify Tag
        if: env.TAG_EXISTS == 'true'
        id: modify_tag
        run: |
          new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
          echo "VERSION=$new_version" >> $GITHUB_ENV
        # PUSH TO RELEASE
      - name: Push to Releases
        uses: ncipollo/release-action@v1
        with:
          ## i am pushing only aab and ipa to release
          artifacts: "build/app/outputs/bundle/release/app-release.aab, build/ios/iphoneos/app.ipa"
          tag: v${{ env.VERSION }}.${{ github.run_number }}
          token: ${{ secrets.TOKEN }}
